variance = beta.moment(5,5,2,T)$value,
skewness = (beta.moment(5,5,3,T)$value)/
((beta.moment(5,5,2,T)$value)^(3/2)),
e.kurt = ((beta.moment(5,5,4,T)$value)/
((beta.moment(5,5,2,T)$value)^2))-3
)
# beta(5,2)
case3.pop.data <- tibble(alpha = 5,
beta = 2,
mean = beta.moment(5,2,1,F)$value,
variance = beta.moment(5,2,2,T)$value,
skewness = (beta.moment(5,2,3,T)$value)/
((beta.moment(5,2,2,T)$value)^(3/2)),
e.kurtosis = ((beta.moment(5,2,4,T)$value)/
((beta.moment(5,2,2,T)$value)^2))-3
)
# beta(0.5,0.5)
case4.pop.data <- tibble(alpha = 0.5,
beta = 0.5,
mean = beta.moment(0.5,0.5,1,F)$value,
variance = beta.moment(0.5,0.5,2,T)$value,
skewness = (beta.moment(0.5,0.5,3,T)$value)/
((beta.moment(0.5,0.5,2,T)$value)^(3/2)),
e.kurtosis = ((beta.moment(0.5,0.5,4,T)$value)/
((beta.moment(0.5,0.5,2,T)$value)^2))-3
)
################################################################################
# Task 3
# do data summaries help?
# function to create numerical summaries for sample size = 500
task3.numsummary <- function(alpha, beta){
set.seed(7272) # Set seed so we all get the same results.
sample.size <- 500 # Specify sample details
beta.sample <- rbeta(n = sample.size,  # sample size
shape1 = alpha,   # alpha parameter
shape2 = beta)    # beta parameter
task3.numericalsummary = summarize(tibble(sample.data = beta.sample),
mean = mean(sample.data),
variance = var(sample.data),
skewness = skewness(sample.data),
# excess kurtosis = kurtosis - 3
e.kurtosis = kurtosis(sample.data) - 3)
# return beta.sample, as it is used in task 4
list(beta.sample, task3.numericalsummary)
}
# function to create histogram + density for sample size = 500
task3.histogram <- function(alpha, beta){
set.seed(7272) # Set seed so we all get the same results.
sample.size <- 500 # Specify sample details
fig.dat <- tibble(x = seq(-0.25, 1.25, length.out=1000))|>   # generate a grid of points
mutate(beta.pdf = dbeta(x, alpha, beta),                      # compute the beta PDF
norm.pdf = dnorm(x,                                    # Gaussian distribution with
mean = alpha/(alpha+beta),            # same mean and variance
sd = sqrt((alpha*beta)/((alpha+beta)^2*(alpha+beta+1)))))
beta.sample <- rbeta(n = sample.size,  # sample size
shape1 = alpha,   # alpha parameter
shape2 = beta)    # beta parameter
beta.pdf.name = paste("Beta(", as.character(alpha), ", ", as.character(beta),
")",  sep = "")
histogram <- ggplot(tibble(sample.data = beta.sample), aes(x=sample.data))+
geom_histogram(aes(y=after_stat(density), color = "Sample Data Histogram"))+
geom_density(aes(color = "Sample Data Density"), key_glyph = draw_key_path)+
geom_line(data = fig.dat, aes(x = x, y = beta.pdf, color = beta.pdf.name))+
xlab("x")+
ylab("Density")
histogram
}
# numerical summary
case1.sample = task3.numsummary(2,5)[[2]]
case2.sample = task3.numsummary(5,5)[[2]]
case3.sample = task3.numsummary(5,2)[[2]]
case4.sample = task3.numsummary(0.5,0.5)[[2]]
# histograms
case1.histogram = task3.histogram(2,5)
case2.histogram = task3.histogram(5,5)
case3.histogram = task3.histogram(5,2)
case4.histogram = task3.histogram(0.5,0.5)
# create histograms using patchwork
task3.histograms <- case1.histogram / case2.histogram |
case3.histogram / case4.histogram
################################################################################
# Task 4
# is sample size important?
# beta(2,5) sample from before
beta.task4.sample = task3.numsummary(2,5)[[1]]
# compute cumulative numsums for given sample
beta.cumstats.test <- tibble(n=(1:length(beta.task4.sample)),
mean=cummean((beta.task4.sample)),
variance=cumvar((beta.task4.sample)),
skewness=cumskew((beta.task4.sample)),
# NOTE: this is kurtosis, not excess kurtosis
# in order to transform into e.kurtosis,
# e.kurt =  kurt - 3
kurtosis=cumkurt((beta.task4.sample)))
# cum mean plot
cum.mean.plot <- ggplot(beta.cumstats.test)+
geom_line(aes(x=n, y = mean))+
geom_hline(data=case1.data, aes(yintercept = mean))
#cum.mean.plot
# cum var plot
cum.var.plot <- ggplot(beta.cumstats.test) +
geom_line(aes(x=n, y = variance))+
geom_hline(data=case1.data, aes(yintercept = variance))
#cum.var.plot
# cum skewness plot
cum.skew.plot <- ggplot(beta.cumstats.test) +
geom_line(aes(x=n, y = skewness))+
geom_hline(data=case1.data, aes(yintercept = skewness))
#cum.skew.plot
# cum kurtosis plot (not excess kurtosis)
cum.kurt.plot <- ggplot(beta.cumstats.test) +
geom_line(aes(x=n, y = kurtosis)) +
# e.kurt turned into kurt
geom_hline(data=case1.data, aes(yintercept = e.kurtosis + 3))
#cum.kurt.plot
#testing
#cum.mean.plot / cum.var.plot | cum.skew.plot / cum.kurt.plot
# for loop
# sample size = 500
alpha <- 2
beta <- 5
sample.size <- 500
for (i in 2:50){
set.seed(7272 + i)
# create new sample in each iteration
beta.sample.loop <- rbeta(n = sample.size,  # sample size
shape1 = alpha,   # alpha parameter
shape2 = beta)    # beta parameter
# create tibble for new sample
beta.cumstats.f <- tibble(n=(1:length(beta.sample.loop)),
mean=cummean((beta.sample.loop)),
variance=cumvar((beta.sample.loop)),
skewness=cumskew((beta.sample.loop)),
kurtosis=cumkurt((beta.sample.loop)))
# update cum mean plot
cum.mean.plot <- cum.mean.plot +
geom_line(data = beta.cumstats.f, aes(x=n, y=mean), color = i)
# update cum var plot
cum.var.plot <- cum.var.plot +
geom_line(data = beta.cumstats.f, aes(x=n, y=variance), color = i)
# update cum skew plot
cum.skew.plot <- cum.skew.plot +
geom_line(data = beta.cumstats.f, aes(x=n, y=skewness), color = i)
# update cum kurtosis plot
cum.kurt.plot <- cum.kurt.plot +
geom_line(data = beta.cumstats.f, aes(x=n, y=kurtosis), color = i)
}
# combine all plots using patchwork
cum.plots <- cum.mean.plot / cum.var.plot | cum.skew.plot / cum.kurt.plot
################################################################################
# Task 5
# how can we model the variation?
# simulate new data from beta(2,5) dist
alpha <- 2
beta <- 5
# same sample size
sample.size <- 500
# create tibble for summary
stats.task5 = tibble(mean = numeric(),
variance = numeric(),
skewness = numeric(),
kurtosis = numeric())
for (i in 1:1000){
set.seed(7272 + i)
beta.sample.task5 <- rbeta(n = sample.size,  # sample size
shape1 = alpha,   # alpha parameter
shape2 = beta)    # beta parameter
mean=mean((beta.sample.task5))
variance=var((beta.sample.task5))
skewness=skewness((beta.sample.task5))
kurtosis=kurtosis((beta.sample.task5))
stats.task5 <- bind_rows(stats.task5, tibble(mean, variance, skewness, kurtosis))
}
# histogram + density for mean
mean.dist <- ggplot(stats.task5)+
geom_histogram(aes(x = mean, y=after_stat(density),
color = "Mean Distribution Histogram"))+
geom_density(aes(x=mean, color = "Mean Density"),
key_glyph = draw_key_path)
# histogram + density for variance
variance.dist <- ggplot(stats.task5)+
geom_histogram(aes(x = variance, y=after_stat(density),
color = "Variance Distribution Histogram"))+
geom_density(aes(x=variance, color = "Variance Density"),
key_glyph = draw_key_path)
# histogram + density for skewness
skewness.dist <- ggplot(stats.task5)+
geom_histogram(aes(x = skewness, y=after_stat(density),
color = "Skewness Distribution Histogram"))+
geom_density(aes(x=skewness, color = "Skewness Density"),
key_glyph = draw_key_path)
# histogram + density for kurtosis
kurtosis.dist <- ggplot(stats.task5)+
geom_histogram(aes(x = kurtosis, y=after_stat(density),
color = "Kurtosis Distribution Histogram"))+
geom_density(aes(x=kurtosis, color = "Kurtosis Density"),
key_glyph = draw_key_path)
# combine plots
stats.dist <- mean.dist / variance.dist | skewness.dist / kurtosis.dist
stats.dist
# looks like normal distribution....
# Task 5
# collect and clean data
death.dat = read
setwd("~/GitHub/lab-7-exploring-the-beta-distribution-HSun8")
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv")
death.dat
view(death.dat)
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") |>
pivot_longer()
view(death.dat)
view(death.dat)
?pivot_wider
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") #|>
?pivot_wider
view(death.dat)
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") |>
pivot_wider()
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv")
View(death.dat)
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") |>
select(-...69)
View(death.dat)
?select
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") |>
select(-...69)|>
select(2022)
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") |>
select(-...69)|>
select("2022")
View(death.dat)
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") |>
select(-...69)|>
select("Country Name", "Country Code", "Indicator Name", "Indicator Code", "2022") |>
mutate(death.prop = "2022"/1000)
?rename
# collect data
death.dat = read_csv("API_SP.DYN.CDRT.IN_DS2_en_csv_v2_76451.csv") |>
select(-...69)|>
select("Country Name", "Country Code", "Indicator Name", "Indicator Code", "2022") |>
rename(deaths.per.1k = "2022") |>
mutate(death.prop = deaths.per.1k/1000)
View(death.dat)
install("nleqslv")
install.packages(nleqslv)
install.packages("nleqslv")
library(nleqslv) # MOM + MLE
nleqslv()
?nleqslv
ggplot(death.prop.data)+
geom_histogram(aes(x=death.prop))
death.prop.data = death.dat |>
select(death.prop)
ggplot(death.prop.data)+
geom_histogram(aes(x=death.prop))
?after_stat
death.prop.plot <- ggplot(death.prop.data) +
geom_histogram(aes(x=death.prop, y = after_stat(..density..)))
death.prop.plot
?nleqslv
nleqslv(x=c(3,3),
fn = mom.beta)
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = beta.moment(alpha, beta, 1, centered = F)
EX2 = beta.moment(alpha, beta, 2, centered = F)
# sample moments
m1 = mean(data)
m2 = mean(data^2)
return(c(EX1-m1, EX2-m2))
}
nleqslv(x=c(3,3),
fn = mom.beta)
nleqslv(x=c(3,3),
fn = mom.beta,
data = death.prop.data)
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = beta.moment(alpha, beta, 1, centered = F)
EX2 = beta.moment(alpha, beta, 2, centered = F)
# sample moments
m1 = mean(data)
m2 = mean(data^2)
return(c(EX1-m1, EX2-m2))
}
nleqslv(x=c(3,3),
fn = mom.beta,
data = death.prop.data)
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = beta.moment(alpha, beta, 1, centered = F)$value
EX2 = beta.moment(alpha, beta, 2, centered = F)$value
# sample moments
m1 = mean(data)
m2 = mean(data^2)
return(c(EX1-m1, EX2-m2))
}
nleqslv(x=c(3,3),
fn = mom.beta,
data = death.prop.data)
View(death.prop.data)
mom.beta(death.prop.data, c(3,5))
mean(death.prop.data)
nleqslv(x=c(3,3),
fn = mom.beta,
data = death.dat$death.prop)
mean(death.prop.data)
mean(death.dat$death.prop)
mean(death.dat$death.prop, na.rm=T)
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = beta.moment(alpha, beta, 1, centered = F)$value
EX2 = beta.moment(alpha, beta, 2, centered = F)$value
# sample moments
m1 = mean(data, na.rm = T)
m2 = mean(data^2, na.rm = T)
return(c(EX1-m1, EX2-m2))
}
nleqslv(x=c(3,3),
fn = mom.beta,
data = death.dat$death.prop)
(nleqslv(x=c(3,3),
fn = mom.beta,
data = death.dat$death.prop))
beta.moment(3,3,1,centered=F)
beta.moment(3,3,1,centered=F)$value
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = beta.moment(alpha, beta, 1, centered = F)$value
EX2 = beta.moment(alpha, beta, 2, centered = F)$value
# sample moments
m1 = mean(data, na.rm = T)
m2 = mean(data^2, na.rm = T)
return(c(EX1-m1, EX2-m2))
}
(nleqslv(x=c(3,3),
fn = mom.beta,
data = death.dat$death.prop))
death.prop.plot <- ggplot(death.dat) +
geom_histogram(aes(x=death.prop, y = after_stat(..density..)))
mom.beta(death.dat$death.prop, par = c(3,3))
(nleqslv(x= c(200, 100),
fn = mom.beta,
data = death.dat$death.prop))
(nleqslv(par= c(200, 100),
fn = mom.beta,
data = death.dat$death.prop))
(nleqslv(x= c(200, 100),
fn = mom.beta,
data = death.dat$death.prop,
par = x))
(nleqslv(x= c(200, 100),
fn = mom.beta,
data = death.dat$death.prop))
(nleqslv(x= c(50, 100),
fn = mom.beta,
data = death.dat$death.prop))
(nleqslv(x= c(8, 800),
fn = mom.beta,
data = death.dat$death.prop))
################################################################################
# LECTURE 14 R CODE
# CIPOLLI
# MATH 240 - SPRING 2025
################################################################################
library(tidyverse)
library(patchwork)
library(nleqslv)
####################################
# Poisson
####################################
dat.ms <- read_csv(file = "MSrelapse.csv") # variable: Relapsein2y
###################
# MOM
###################
MOM.pois <- function(data, par){
lambda <- par[1]
EX <- lambda
m1 <- mean(data)
return(EX-m1) # Goal: find lambda so this is 0
}
nleqslv(x = 20, # guess
fn = MOM.pois,
data=dat.ms$Relapsein2y)
###################
# MLE
###################
llpois <- function(data, par, neg=FALSE){
lambda <- par[1]
loglik <- sum(log(dpois(x=data, lambda = lambda)))
return(ifelse(neg, -loglik, loglik))
}
###################
# MOM
###################
MOM.pois <- function(data, par){
lambda <- par[1]
EX <- lambda
m1 <- mean(data)
return(EX-m1) # Goal: find lambda so this is 0
}
nleqslv(x = 20, # guess
fn = MOM.pois,
data=dat.ms$Relapsein2y)
?nleqslv
beta.moment(2,5,1, centered = F)
(2)/(2+5)
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = beta.moment(alpha, beta, 1, centered = F)$value
EX2 = beta.moment(alpha, beta, 2, centered = F)$value
# sample moments
m1 = mean(data, na.rm = T)
m2 = mean(data^2, na.rm = T)
return(c(EX1-m1, EX2-m2))
}
(nleqslv(x= c(8, 800),
fn = mom.beta,
data = death.dat$death.prop))
(nleqslv(x= c(45, 400),
fn = mom.beta,
data = death.dat$death.prop))
(nleqslv(x= c(2, 400),
fn = mom.beta,
data = death.dat$death.prop))
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = alpha/(alpha + beta)
#beta.moment(alpha, beta, 1, centered = F)$value
EX2 = (alpha * (alpha + 1))/((alpha + beta + 1) * (alpha + beta))
#beta.moment(alpha, beta, 2, centered = F)$value
# sample moments
m1 = mean(data, na.rm = T)
m2 = mean(data^2, na.rm = T)
return(c(EX1-m1, EX2-m2))
}
(nleqslv(x= c(2, 400),
fn = mom.beta,
data = death.dat$death.prop))
beta.moment(2,400,1,centered=F)
2/(402)
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = alpha/(alpha + beta)
#beta.moment(alpha, beta, 1, centered = F)$value
EX2 = (alpha * (alpha + 1))/((alpha + beta + 1) * (alpha + beta))
#beta.moment(alpha, beta, 2, centered = F)$value
# sample moments
m1 = mean(data, na.rm = T)
m2 = mean(data^2, na.rm = T)
return(c(EX1-m1, EX2-m2))
}
(nleqslv(x= c(2, 400),
fn = mom.beta,
data = death.dat$death.prop))
# MOM
mom.beta <- function(data, par){
alpha = par[1]
beta = par[2]
# pop moments
EX1 = beta.moment(alpha, beta, 1, centered = F)$value
#alpha/(alpha + beta)
#beta.moment(alpha, beta, 1, centered = F)$value
EX2 = beta.moment(alpha, beta, 2, centered = F)$value
#(alpha * (alpha + 1))/((alpha + beta + 1) * (alpha + beta))
#beta.moment(alpha, beta, 2, centered = F)$value
# sample moments
m1 = mean(data, na.rm = T)
m2 = mean(data^2, na.rm = T)
return(c(EX1-m1, EX2-m2))
}
(nleqslv(x= c(2, 400),
fn = mom.beta,
data = death.dat$death.prop))
beta.moment(2,400,1,centered=F)
2/402
beta.moment(2,400,2,centered=F)
6/(403*402)
c(1, 2)^2
